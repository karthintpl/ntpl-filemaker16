<?phpnamespace Ntpl;use FileMaker;class Database extends FileMaker{    protected $_database;    protected $_hostspec;    protected $_username;    protected $_password;    function __construct($database = null, $hostspec = null, $username = null, $password = null)    {        $this->_database = $database;        $this->_hostspec = $hostspec;        $this->_username = $username;        $this->_password = $password;        $this->fm_connect();    }    public function fm_connect()    {        parent::__construct($this->_database, $this->_hostspec, $this->_username, $this->_password);        $connected = $this->listLayouts();        if ($this->isError($connected)):            return $connected->getMessage();        endif;    }    public function fm_container_bridge($path)    {        if (isset($path)) {            $url = $path;            // Search for the extension of the file            $url = substr($url, 0, strpos($url, "?"));            $url = substr($url, strrpos($url, ".") + 1);            // Send the correct Content-Type header            if ($url == "jpg") {                header('Content-type: image/jpeg');            } else if ($url == "gif") {                header('Content-type: image/gif');            } else if ($url == "pdf") {                header('Content-type: application/pdf');            } else {                header('Content-type: application/octet-stream');            }            // Show the contents of the container field            return $this->getContainerData($path);        }    }    /**     * Retrieve all records from a specified layout.     *     * @param $_layout     *     * @return object     */    public function retrieve_all_cmd($_layout)    {        $findCommand = $this->newFindAllCommand($_layout);        return $findCommand->execute();    }    /**     *  Create a new record     *     * @param $_layout     * @param $values     *     * @return object     */    public function create_record_cmd($_layout, $values)    {        $newAdd = $this->newAddCommand($_layout, $values);        return $newAdd->execute();    }    /**     *  Find a record     *     * @param $_layout     * @param $field     * @param $value     *     * @return object     */    public function find_a_record_by_field($_layout, $field, $value)    {        $findCommand = $this->newFindCommand($_layout);        $findCommand->addFindCriterion($field, $value);        return $findCommand->execute();    }    /**     *  Find a multiple record     *     * @param $_layout     * @param $conditions_fields_values (Array)     * @param $sort_arr (Array)     * @param $range_arr (Array)     *     * @return object     */    public function multiple_find_a_record_by_fields($_layout, $conditions_fields_values = array(), $sort_arr = array(), $range_arr = array())    {        //don't change this condition this is static        $fm_condition = [            1 => "=",  //match whold word            2 => "==", //match entire field            3 => "!", // find duplicate values            4 => "<", // less than            5 => "<=", // less than or equal to            6 => ">", // greater than            7 => ">=", // greater than equal to            18 => ""    //empty search        ];        $findCommand = $this->newFindCommand($_layout);        //check codition        foreach ($conditions_fields_values as $search_arr):            $condition = $fm_condition[$search_arr[0]];            $field = $search_arr[1];            $value = $search_arr[2];            $findCommand->addFindCriterion($field, $condition . $value);        endforeach;        //check sording orders        foreach ($sort_arr as $sort_order):            $field_sort = $sort_order[0];            $priority_sort = $sort_order[1];            $order = $sort_order[2];            if ($order == 'A'):                $findCommand->addSortRule($field_sort, $priority_sort, FILEMAKER_SORT_ASCEND);            elseif ($order == 'D'):                $findCommand->addSortRule($field_sort, $priority_sort, FILEMAKER_SORT_DESCEND);            endif;        endforeach;        if (!empty($range_arr)):            $findCommand->setRange($range_arr['skip'], $range_arr['max']);        endif;        return $findCommand->execute();    }}